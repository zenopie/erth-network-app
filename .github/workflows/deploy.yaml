name: Deploy to Remote Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          clean: true

      - name: Deploy and Build on Remote Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_SERVER_HOST }}
          username: ${{ secrets.REMOTE_SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e  # Exit on error

            HOME_DIR=/home/secret/earth-mainnet-app
            BUILD_DIR=$HOME_DIR/build
            SERVER_DIR=$HOME_DIR/server
            DEPLOY_DIR=/var/www/erth

            mkdir -p $HOME_DIR

            # Clone or update repository
            cd $HOME_DIR
            if [ -d ".git" ]; then
              git fetch origin
              git reset --hard origin/main
              git clean -fd
            else
              git clone https://github.com/zenopie/erth-mainnet-app.git .
            fi

            # Install Node.js for front-end build
            export NVM_DIR="$HOME/.nvm"
            if [ ! -d "$NVM_DIR" ]; then
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
            fi
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            nvm install 18.20.7
            nvm use 18.20.7
            nvm alias default 18.20.7

            # Build front-end
            if [ -f package.json ]; then
              npm install
              npm update
              rm -rf $BUILD_DIR/*
              npm run build
            else
              echo "package.json not found!"
              exit 1
            fi

            # Copy front-end build to deployment directory
            rm -rf $DEPLOY_DIR/*
            cp -r $BUILD_DIR/* $DEPLOY_DIR/

            # Install build dependencies for Python
            sudo apt-get update
            sudo apt-get install -y build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev curl libbz2-dev pkg-config libsecp256k1-dev python3-dev

            # Install Python environment for server
            cd $SERVER_DIR
            export PYENV_ROOT="$HOME/.pyenv"
            if [ ! -d "$PYENV_ROOT" ]; then
              curl https://pyenv.run | bash
            fi
            export PATH="$PYENV_ROOT/bin:$PATH"
            eval "$(pyenv init --path)"
            eval "$(pyenv init -)"
            export PYTHON_CONFIGURE_OPTS="--with-openssl=/usr --with-openssl-rpath=auto --enable-optimizations"
            pyenv install 3.12.0 -s || { echo "Python 3.12.0 installation failed"; cat /tmp/python-build.*.log; exit 1; }
            pyenv global 3.12.0

            # Ensure WALLET_KEY.txt exists
            if [ ! -f $SERVER_DIR/WALLET_KEY.txt ]; then
              echo "${{ secrets.WALLET_MNEMONIC }}" > $SERVER_DIR/WALLET_KEY.txt
              chmod 644 $SERVER_DIR/WALLET_KEY.txt
              chown secret:secret $SERVER_DIR/WALLET_KEY.txt
            fi

            # Install Python dependencies
            if [ -f $SERVER_DIR/requirements.txt ]; then
              $HOME/.pyenv/versions/3.12.0/bin/pip install --upgrade pip
              $HOME/.pyenv/versions/3.12.0/bin/pip install -r $SERVER_DIR/requirements.txt
            else
              echo "requirements.txt not found!"
              exit 1
            fi

            # Install supervisor if not present
            if ! command -v supervisorctl &> /dev/null; then
              sudo apt-get install -y supervisor
            fi

            # Configure supervisor for uvicorn
            SUPERVISOR_CONF=/etc/supervisor/conf.d/erth-network-server.conf
            echo "[program:erth-network-server]" | sudo tee $SUPERVISOR_CONF
            echo "directory=$SERVER_DIR" | sudo tee -a $SUPERVISOR_CONF
            echo "command=$HOME/.pyenv/versions/3.12.0/bin/uvicorn server:app --host 0.0.0.0 --port 5000" | sudo tee -a $SUPERVISOR_CONF
            echo "autostart=true" | sudo tee -a $SUPERVISOR_CONF
            echo "autorestart=true" | sudo tee -a $SUPERVISOR_CONF
            echo "user=secret" | sudo tee -a $SUPERVISOR_CONF
            echo "stdout_logfile=$SERVER_DIR/erth-network-server.log" | sudo tee -a $SUPERVISOR_CONF
            echo "stderr_logfile=$SERVER_DIR/erth-network-server.err" | sudo tee -a $SUPERVISOR_CONF

            # Restart supervisor to apply changes
            sudo supervisorctl reread
            sudo supervisorctl update
            sudo supervisorctl restart erth-network-server